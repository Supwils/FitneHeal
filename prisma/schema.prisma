// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  //emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  Blog    Blog[]
  Comment Comment[]
  Account Account[]
}

model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Blog {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  images      String[] // Array of image URLs
  videos      String[] // Array of video URLs
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  comments    Comment[]
  tags        String[]
  datePosted  DateTime  @default(now())
  lastUpdated DateTime  @updatedAt
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  comment    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  blog       Blog     @relation(fields: [userId], references: [id])
  postId     String
  datePosted DateTime @default(now())
}
